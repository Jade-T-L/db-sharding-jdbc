mybatis:
  mapper-locations: classpath*:com/zhuzi/dbshardingjdbc/mapper/*.xml
  type-aliases-package: com.zhuzi.dbshardingjdbc.model

spring:
  shardingsphere:
    # 将运行模式配置为Standalone单机模式（Cluster：集群模式）
    mode:
      type: Standalone
      repository:
        type: JDBC

    # 配置多数据源
    datasource:
      # 为多个数据源配置别名
      names: ds0,ds1
      # 配置第一个数据源的详情
      ds0:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/db_shardingjdbc_01?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false
        username: root
        password: 123QWEasd
      # 配置第二个数据源的详情
      ds1:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/db_shardingjdbc_02?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false
        username: root
        password: 123QWEasd

    # 执行时显示SQL语句
    props:
      # 日志显示具体的SQL
      sql-show: true

    # 配置分片规则
    rules:
      # 配置分片策略
      sharding:
        # 配置所有分片表
        tables:

          # 配置订单表的分片策略
          order:
            # 声明订单表所在的真实数据节点（ds0.order、ds1.order）
            actual-data-nodes: ds$->{0..1}.order

            # 配置分库规则
            database-strategy:
              standard:
                # 配置路由键为order_id（数据库中的列名）
                sharding-column: order_id
                # 配置分片算法（使用内置的取模分片算法）
                sharding-algorithm-name: key-int-mod

            # 配置订单表的主键生成策略
            key-generate-strategy:
              # 声明主键为order_id
              column: order_id
              # 同样使用之前的雪花算法
              keygenerator-name: global-id-snowflake

          # 配置订单详情表的分片策略
          order_info:
            # 声明商品详情表所在的真实数据节点（ds0.order_info、ds1.order_info）
            actual-data-nodes: ds$->{0..1}.order_info

            # 配置分库规则
            database-strategy:
              standard:
                # 配置路由键为order_id（这里的路由键要和订单表一致）
                sharding-column: order_id
                # 配置分片算法（使用内置的取模分片算法）
                sharding-algorithm-name: key-int-mod

            # 配置订单详情表的主键生成策略
            key-generate-strategy:
              # 声明主键为order_info_id
              column: order_info_id
              # 同样使用之前的雪花算法
              keygenerator-name: global-id-snowflake


        # 这里统一配置所有的主键生成策略
        key-generators:
          # 配置上面的主键生成策略
          global-id-snowflake:
            # 选择使用内置的雪花算法
            type: SNOWFLAKE
            props:
              # 分配一个工作节点ID（要确保全局唯一）
              worker-id: 111

        # 这里统一配置所有的分片算法
        sharding-algorithms:
          # 配置取模分库算法
          key-int-mod:
            # 使用ShardingSphere内置的取模算法
            type: MOD
            props:
              # 声明分库的节点数量
              sharding-count: 2

          # 配置哈希取模的分表算法
          key-hash-mod:
            # 使用内置的哈希取模算法
            type: HASH_MOD
            props:
              # 声明分表的节点数量
              sharding-count: 2

        # 配置绑定表关系
        binding-tables:
          # 配置第一组绑定表的关系（订单表、订单详情表）
          - order,order_info
